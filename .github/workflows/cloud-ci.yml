name: Cloud CI/CD

on:
  push:
    branches: [ main, feature/cloud-saas ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Run tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Run unit tests
      run: |
        go test -v -race -coverprofile=coverage.txt -covermode=atomic $(go list ./... | grep -v /hack)

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.txt
        flags: unittests

  # Job 2: Build binaries
  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        binary: [cloud-cp, cloud-agent, orzbob]
        goos: [linux, darwin]
        goarch: [amd64, arm64]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        BINARY_PATH="."
        if [ "${{ matrix.binary }}" != "orzbob" ]; then
          BINARY_PATH="./cmd/${{ matrix.binary }}"
        fi
        
        BINARY_NAME="${{ matrix.binary }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        go build -v -ldflags="-s -w" -o "build/${{ matrix.goos }}_${{ matrix.goarch }}/${BINARY_NAME}" ${BINARY_PATH}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.binary }}-${{ matrix.goos }}-${{ matrix.goarch }}
        path: build/${{ matrix.goos }}_${{ matrix.goarch }}/*
        retention-days: 7

  # Job 3: Build Docker images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - image: cloud-cp
            dockerfile: ./docker/control-plane.Dockerfile
            context: .
          - image: cloud-agent
            dockerfile: ./docker/runner.Dockerfile
            context: .
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.image }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.dockerfile }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 4: Helm lint
  helm-lint:
    name: Helm Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.13.0'

    - name: Lint control plane chart
      run: |
        helm lint charts/cp
        # Validate helm template output without requiring a cluster
        helm template charts/cp > /tmp/cp-manifest.yaml
        # Basic YAML validation
        python3 -c "import yaml; yaml.safe_load_all(open('/tmp/cp-manifest.yaml'))" || (echo "Invalid YAML in helm template" && exit 1)

    - name: Lint logging chart
      run: |
        if [ -f charts/logging/Chart.yaml ]; then
          helm lint charts/logging
        fi

  # Job 5: Kind E2E tests
  kind-e2e:
    name: Kind E2E Tests
    runs-on: ubuntu-latest
    needs: [build-images, helm-lint]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Create kind cluster
      uses: helm/kind-action@v1.8.0
      with:
        cluster_name: orzbob-e2e
        node_image: kindest/node:v1.28.0

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Load Docker images
      run: |
        # For PRs, we need to pull and load the images
        # Use the branch-sha tag format
        BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
        BRANCH_NAME=${BRANCH_NAME//\//-} # Replace / with -
        IMAGE_TAG="${BRANCH_NAME}-${GITHUB_SHA::8}"
        
        echo "Pulling images with tag: ${IMAGE_TAG}"
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/cloud-cp:${IMAGE_TAG} || \
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/cloud-cp:${{ github.sha }}
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/cloud-agent:${IMAGE_TAG} || \
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/cloud-agent:${{ github.sha }}
        
        # Tag them for kind
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/cloud-cp:${IMAGE_TAG} orzbob/cloud-cp:e2e || \
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/cloud-cp:${{ github.sha }} orzbob/cloud-cp:e2e
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/cloud-agent:${IMAGE_TAG} orzbob/cloud-agent:e2e || \
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/cloud-agent:${{ github.sha }} orzbob/cloud-agent:e2e
        
        kind load docker-image orzbob/cloud-cp:e2e --name orzbob-e2e
        kind load docker-image orzbob/cloud-agent:e2e --name orzbob-e2e

    - name: Install control plane
      run: |
        helm install orzbob-cp charts/cp \
          --set image.repository=orzbob/cloud-cp \
          --set image.tag=e2e \
          --set image.pullPolicy=Never \
          --wait --timeout 5m

    - name: Run E2E tests
      run: |
        # Wait for control plane to be ready
        kubectl wait --for=condition=ready pod -l app=orzbob-cp --timeout=120s
        
        # Port forward control plane
        kubectl port-forward svc/orzbob-cp 8080:8080 &
        PF_PID=$!
        sleep 5
        
        # Run smoke tests
        go run hack/smoke.go
        
        # Run integration tests
        go test -v -tags=e2e $(go list ./test/e2e/... | grep -v /hack)
        
        # Cleanup
        kill $PF_PID || true

    - name: Collect logs on failure
      if: failure()
      run: |
        kubectl describe pods || echo "Unable to describe pods"
        kubectl logs -l app=orzbob-cp --tail=100 || echo "No control plane logs found"
        kubectl logs -l app=orzbob-agent --tail=100 || echo "No agent logs found"

  # Job 6: Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-images
    steps:
    - uses: actions/checkout@v4

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Determine image tag
      id: image-tag
      run: |
        BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
        BRANCH_NAME=${BRANCH_NAME//\//-} # Replace / with -
        IMAGE_TAG="${BRANCH_NAME}-${GITHUB_SHA::8}"
        echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/cloud-cp:${{ steps.image-tag.outputs.tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: success()
      with:
        sarif_file: 'trivy-results.sarif'