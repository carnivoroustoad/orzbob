name: Automated Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (without v prefix)'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build binaries and create archives
        run: |
          PLATFORMS="darwin/amd64 darwin/arm64 linux/amd64 linux/arm64 windows/amd64"
          
          # Create build directory
          mkdir -p build
          
          for PLATFORM in $PLATFORMS; do
            GOOS=${PLATFORM%/*}
            GOARCH=${PLATFORM#*/}
            BINARY_NAME="orzbob"
            EXT=""
            
            if [ "$GOOS" = "windows" ]; then
              EXT=".exe"
            fi
            
            echo "Building for $GOOS/$GOARCH..."
            GOOS=$GOOS GOARCH=$GOARCH go build -o "$BINARY_NAME$EXT" .
            
            # Create proper archive names following the format: orzbob_$VERSION_$GOOS_$GOARCH.tar.gz
            # This format must match what the install.sh script expects
            if [ "$GOOS" = "windows" ]; then
              ARCHIVE_NAME="orzbob_${{ env.VERSION }}_${GOOS}_${GOARCH}.zip"
              zip -q "${ARCHIVE_NAME}" "$BINARY_NAME$EXT"
            else
              ARCHIVE_NAME="orzbob_${{ env.VERSION }}_${GOOS}_${GOARCH}.tar.gz"
              tar czf "${ARCHIVE_NAME}" "$BINARY_NAME$EXT"
            fi
            
            mv "${ARCHIVE_NAME}" "build/"
            rm -f "$BINARY_NAME$EXT"
          done

      - name: Set release version
        id: set_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
            echo "TAG=v${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            # Extract version from tag
            TAG=${GITHUB_REF#refs/tags/}
            echo "TAG=$TAG" >> $GITHUB_ENV
            VERSION=${TAG#v}
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          fi
          echo "Using version: $VERSION, tag: $TAG"

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/orzbob_${{ env.VERSION }}_darwin_amd64.tar.gz
            build/orzbob_${{ env.VERSION }}_darwin_arm64.tar.gz
            build/orzbob_${{ env.VERSION }}_linux_amd64.tar.gz
            build/orzbob_${{ env.VERSION }}_linux_arm64.tar.gz
            build/orzbob_${{ env.VERSION }}_windows_amd64.zip
          draft: false
          prerelease: false
          generate_release_notes: true
          tag_name: ${{ env.TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}