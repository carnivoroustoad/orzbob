name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  DEPLOY_NAMESPACE: orzbob-system

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push control plane image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/control-plane.Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/cloud-cp:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ github.repository }}/cloud-cp:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Setup Kubernetes
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > /tmp/kubeconfig
          echo "KUBECONFIG=/tmp/kubeconfig" >> $GITHUB_ENV
          
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
      
      - name: Create namespace
        run: |
          kubectl create namespace ${{ env.DEPLOY_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Create Polar billing secrets
        run: |
          kubectl create secret generic polar-credentials \
            --from-literal=api-key="${{ secrets.POLAR_API_KEY }}" \
            --from-literal=project-id="${{ secrets.POLAR_PROJECT_ID }}" \
            --from-literal=webhook-secret="${{ secrets.POLAR_WEBHOOK_SECRET }}" \
            --namespace=${{ env.DEPLOY_NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Label the secret for tracking
          kubectl label secret polar-credentials \
            --namespace=${{ env.DEPLOY_NAMESPACE }} \
            app.kubernetes.io/managed-by=github-actions \
            app.kubernetes.io/instance=orzbob-cloud \
            --overwrite
      
      - name: Create email configuration secret
        run: |
          kubectl create secret generic email-config \
            --from-literal=smtp-host="${{ secrets.SMTP_HOST }}" \
            --from-literal=smtp-port="${{ secrets.SMTP_PORT }}" \
            --from-literal=smtp-username="${{ secrets.SMTP_USERNAME }}" \
            --from-literal=smtp-password="${{ secrets.SMTP_PASSWORD }}" \
            --from-literal=from-address="${{ secrets.EMAIL_FROM_ADDRESS }}" \
            --namespace=${{ env.DEPLOY_NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Label the secret
          kubectl label secret email-config \
            --namespace=${{ env.DEPLOY_NAMESPACE }} \
            app.kubernetes.io/managed-by=github-actions \
            app.kubernetes.io/instance=orzbob-cloud \
            --overwrite
      
      - name: Deploy with Helm
        run: |
          # Update dependencies
          helm dependency update ./charts/cp
          
          # Deploy or upgrade
          helm upgrade --install orzbob-cloud ./charts/cp \
            --namespace=${{ env.DEPLOY_NAMESPACE }} \
            --set image.repository=${{ env.REGISTRY }}/${{ github.repository }}/cloud-cp \
            --set image.tag=${{ github.sha }} \
            --set billing.enabled=true \
            --set billing.existingSecret=polar-credentials \
            --set email.enabled=false \
            --set email.existingSecret=email-config \
            --set ingress.enabled=true \
            --set ingress.hosts[0].host=api.orzbob.cloud \
            --set ingress.hosts[0].paths[0].path=/ \
            --set ingress.hosts[0].paths[0].pathType=Prefix \
            --wait \
            --timeout=10m
      
      - name: Verify deployment
        run: |
          # Wait for rollout to complete
          kubectl rollout status deployment/orzbob-cloud-orzbob-cp \
            --namespace=${{ env.DEPLOY_NAMESPACE }} \
            --timeout=5m
          
          # Check pod status
          kubectl get pods -n ${{ env.DEPLOY_NAMESPACE }} -l app.kubernetes.io/instance=orzbob-cloud
          
          # Check billing configuration
          echo "Checking billing configuration..."
          kubectl exec -n ${{ env.DEPLOY_NAMESPACE }} \
            deployment/orzbob-cloud-orzbob-cp -- \
            sh -c 'if [ "$BILLING_ENABLED" = "true" ]; then echo "✓ Billing is enabled"; else echo "✗ Billing is disabled"; fi'
      
      - name: Run smoke tests
        run: |
          # Port forward to the service
          kubectl port-forward -n ${{ env.DEPLOY_NAMESPACE }} \
            svc/orzbob-cloud-orzbob-cp 8080:80 &
          PF_PID=$!
          
          # Wait for port forward
          sleep 5
          
          # Test health endpoint
          echo "Testing health endpoint..."
          curl -f http://localhost:8080/health || exit 1
          
          # Test billing endpoint (if enabled)
          if [ "${{ secrets.POLAR_API_KEY }}" != "" ]; then
            echo "Testing billing endpoint..."
            curl -f http://localhost:8080/v1/billing || echo "Billing endpoint returned error (expected if no auth)"
          fi
          
          # Clean up
          kill $PF_PID || true
      
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "Image: ${{ env.REGISTRY }}/${{ github.repository }}/cloud-cp:${{ github.sha }}"
            echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
          else
            echo "❌ Deployment failed!"
          fi

  release:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true
      
      - name: Get version
        id: get_version
        run: |
          # Get the latest tag or generate a new version
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Extract version numbers
          MAJOR=$(echo $LATEST_TAG | cut -d. -f1 | sed 's/v//')
          MINOR=$(echo $LATEST_TAG | cut -d. -f2)
          PATCH=$(echo $LATEST_TAG | cut -d. -f3)
          
          # Increment patch version
          PATCH=$((PATCH + 1))
          
          # Create new version
          VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Previous version: $LATEST_TAG"
          echo "New version: v$VERSION"
      
      - name: Build binaries
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          
          # Build for multiple platforms
          for OS in linux darwin windows; do
            for ARCH in amd64 arm64; do
              # Skip windows/arm64
              if [ "$OS" = "windows" ] && [ "$ARCH" = "arm64" ]; then
                continue
              fi
              
              echo "Building for $OS/$ARCH..."
              
              # Set binary name
              BINARY_NAME="orz"
              if [ "$OS" = "windows" ]; then
                BINARY_NAME="${BINARY_NAME}.exe"
              fi
              
              # Build
              GOOS=$OS GOARCH=$ARCH go build \
                -ldflags "-X main.version=$VERSION -X main.gitCommit=${{ github.sha }} -X main.buildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
                -o "dist/orz-${OS}-${ARCH}/${BINARY_NAME}" \
                ./main.go
              
              # Create tarball/zip
              if [ "$OS" = "windows" ]; then
                (cd dist && zip -r "orz-${OS}-${ARCH}.zip" "orz-${OS}-${ARCH}")
              else
                (cd dist && tar -czf "orz-${OS}-${ARCH}.tar.gz" "orz-${OS}-${ARCH}")
              fi
            done
          done
          
          # List built artifacts
          ls -la dist/
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            CHANGES=$(git log --pretty=format:"- %s" --no-merges | head -20)
          else
            CHANGES=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s" --no-merges)
          fi
          
          # Save to file and output for use in release
          echo "$CHANGES" > changelog.txt
          
          # Escape for GitHub Actions
          CHANGES="${CHANGES//'%'/'%25'}"
          CHANGES="${CHANGES//$'\n'/'%0A'}"
          CHANGES="${CHANGES//$'\r'/'%0D'}"
          echo "CHANGES=$CHANGES" >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          release_name: Release v${{ steps.get_version.outputs.VERSION }}
          body: |
            ## 🚀 Orzbob Cloud Release
            
            ### What's Changed
            ${{ steps.changelog.outputs.CHANGES }}
            
            ### Docker Images
            - Control Plane: `${{ env.REGISTRY }}/${{ github.repository }}/cloud-cp:${{ github.sha }}`
            
            ### Installation
            
            #### Quick Install (Recommended)
            ```bash
            curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh | bash
            ```
            
            #### Manual Download
            ```bash
            # macOS/Linux
            curl -L https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/orz-$(uname -s | tr '[:upper:]' '[:lower:]')-$(uname -m | sed 's/x86_64/amd64/').tar.gz | tar xz
            sudo mv orz-*/orz /usr/local/bin/
            ```
            
            ### Getting Started
            ```bash
            # Login to Orzbob Cloud
            orz login
            
            # Create your first cloud development instance
            orz cloud new --tier small
            
            # List your instances
            orz cloud list
            ```
            
            ### Supported Platforms
            - macOS (Intel & Apple Silicon)
            - Linux (x86_64 & ARM64)
            - Windows (x86_64)
          draft: false
          prerelease: false
      
      - name: Upload Release Assets
        run: |
          # Upload all archives
          for file in dist/*.tar.gz dist/*.zip; do
            if [ -f "$file" ]; then
              echo "Uploading $file..."
              asset_name=$(basename "$file")
              
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$file" \
                "${{ steps.create_release.outputs.upload_url }}?name=${asset_name}"
            fi
          done